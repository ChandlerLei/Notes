1. IoC(Inversion of Control--控制反转)
(1) 概念
控制反转是一种思想。
控制：对象A想要使用对象B，传统的思想是对象A控制对象B的创建、生存周期。控制反转是指将对象B的控制权交给IoC容器，IoC容器来负责给对象A进行依赖对象的注入。
反转：对于对象A来说，依赖对象的获取方式从主动变为被动，所以叫做反转。

举例：
pic/散记_Spring_IoC_1.JPG
pic/散记_Spring_IoC_2.JPG

(2) 好处
为何要这么设计，其实就是降低了对象之间的耦合。

(3) IoC与DI(Dependency Injection--依赖注入)
两者是对同一概念的不同描述。
谁注入谁：IoC容器注入应用程序的某个对象。
注入了什么：将这个对象的外部依赖(包括对象/资源/常量数据)注入。
--依赖的注入是在运行期决定的，所以提高了程序的灵活性。

(4) 配置文件
IoC容器如何知道哪些是它管理的对象呢？这就需要配置文件。
IoC容易通过读取配置文件中的配置元数据来进行管理对象。
一般使用xml文件进行配置元数据。也可以使用其他方式配置：注解、基于Java文件的属性文件等。

(5) Bean
我们把由IoC容器管理的对象称为Bean。
Bean就是由IoC容器管理，初始化，装配的对象。除此之外，和普通的Java对象一样。

(6) IoC容器
我们通过上述配置，IoC容器负责装配对象。然后我们在应用程序中，就可以从IoC容器中获得我们想要的对象。
IoC容器：其实就是一种容器的概念，即用来装东西(对象)的容器。
散记_Spring_IoC_3.JPG

2. IoC注入依赖资源的两种方式：
构造器注入
setter注入





一棵树
1. 什么是IoC、DI。概念、好处
2. 一般我们通过XML配置文件让IoC容器知道如何管理依赖对象。
3. XML中Bean定义的格式。
4. IoC注入依赖资源的方式：构造器注入（包括普通方式、静态工厂和实力工厂）和setter注入
5. 方法注入
6. bean的scope：singleton和prototype
7. 加载资源
8. 表达式语言--提供静态语言的动态功能















