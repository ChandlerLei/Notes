1. 句柄
在Java中，一切都是对象。但操纵的标识符实际上是指向一个对象的“句柄(handle)”。
A a; 此时a就是一个句柄。
a = new A(); 此时a就是指向一个对象的句柄。

2. 数据内存存储位置
(1) 寄存器：位于处理器内，速度最快，但个数有限，由编译器分配，程序无法控制。
(2) 堆栈： 速度仅次于寄存器，但容量不是很大，且在编译期就必须知道堆栈内保存的所有数据的长度以及存在时间。
所以一般Java保存在堆栈中得时对象句柄，Java对象是不放在堆栈中的。
(3) 堆：速度要低于堆栈，Java对象保存于其中。堆在编译期不必知道从堆里分配多少存储空间以及生存时间，所以更加灵活。
当我们new命令时，就会自动在堆里保存对象。
(4) 静态存储：这里的“静态”是指“位于内存中的固定位置”（在RAM里）。程序运行期间静态存储的数据随时等候调用。可用static指出对象的特定元素是静态的。但Java对象本身永远都不会置入静态存储空间。
Ques: 为何top-level class不能声明static？
static关键字的目的在于，设置一个对象的某个变量或函数为静态的。所有对象的实例只会有一份拷贝，
如果top-level class设为static，外面已没有东西了，所以没有任何的意义。所以在Java中是禁止的。
显然内部类是可以是static的。
(5) 常数存储：常数值通常置于程序代码内部，因为他们永远都不会改变。
(6) 非RAM存储：数据可独立于程序之外。最主要的例子是”流式对象“和”固定对象“。

3. 特殊情况：主要类型
在Java中，有一系列类需要特别对待：可把它们看做基本类型。
这些类无需要进行new创建对象（放在堆中）。而是直接创建一个非句柄的变量（放在堆栈中）--决定了Java决定了这些类型的大小，不可改变。
boolean 1位 Boolean
byte 8位-1字节 Byte
char 16位-2字节 Character--以便对unicode的支持
short 16位-2字节 Short
int 32位-4字节 Integer
long 64位-8字节 Long
float 32位-4字节 Float
double 64位-8字节 Double
这些基本类型都拥有自己的封装器（一般首字母大写）。封装器与其他一般类一样，使用new创建对象，位于堆中。
注意Java是一种与平台无关的语言，每个类型的字节数在任何机器上都相同。

如果需要高精度，Java中有BigInteger与BigDecimal。

4. 变量的作用域
{
	int x = 1;
	{
		int x = 3;
		int y = 4;
	}//此时y被回收
}
(1) C++中这种是允许的，被称为隐藏。
而在Java中是不允许的。
(2) 基本类型的变量会在作用域之外，立刻被回收。
而对象的变量在作用域之外，不会马上消失，之后会被GC回收。
{
	String s = new String("sdasad");
}// 此时s这个句柄已被回收，但是它指向的对象并没有消失，而之后Java的GC会因对象并没有任何句柄指向而自动回收，这个无需程序员关心。

5. 变量的默认值
类的成员变量（基本类型）是可以自动有默认值的(bool-false/char-'\0'/int-0/double-0.0)。
而函数内的定义一个变量,如果没有初始化，是不会自动赋默认值的。--直接使用会出现报错。
Java的想法是普通变量不初始化，很可能是程序员忘记了，我们给他显示错误，更好地为了程序的正确性。
而类成员变量自动初始化，是因为类中有成员函数，类的使用者一般直接调用成员函数，此时再让它强制初始化是不合理的。

6. 函数传参
在Java中传参传递的都是句柄（除了基本类型外）--基本类型为值传递，其他类型为引用传递。

7. 类初始化顺序
静态变量/静态初始化块->普通成员/普通初始化块->构造函数
Java是静态语言，如果定义的类，没有被用到，则类的成员(包括静态)不会有任何初始化。

8. 类名和文件名的关系
一个.java文件，最多有一个public类，且其类名必须与文件名一致。
一个.java文件，可以没有public类，这时文件名随意。
一个.java文件，可以存在不和文件名同名的类，前提是这个类不是public的。

9. 注释文档
注释：//和/**/和C++的一样
注释文档：
Java世界里，希望把代码和文档嵌套在一起，所以规定了一些特殊标记来生成文档。
使用javadoc命令来生成，只对/**开头的注释起作用，生成的文档是HTML格式。
（1）java里注释的对象只有三种：类，变量，方法。如下：
/** 一个类注释 */
public class DocTest {
	/** 一个变量注释 */
	public int i;
	/** 一个方法注释 */
	public void f() {}
}
（2）javadoc的两种特殊方式：嵌入html元素和使用“文档标记”-使得注释更有可读性。
嵌入html元素不太推荐，显得代码稍微有点乱。
多数使用“文档标记”
（3）文档标记
(a) @see：引用其他类
用法：
@see 类名
@see 完整类名#方法名
每一个格式都会在生成文档里自动加入一个超链接“See Also”条目。
(b) 类文档标记
除可用html和@see外
@version 版本信息
@author 作者信息
(c) 变量文档标记
只可用html和@see
(d) 方法文档标记
除可用html和@see外
@param 参数名 说明
@return 说明
@exception 完整类名 说明
@ deprecated
例子：
import java.util.*;
/** 
* This is an example comment.
* @author BruceEckel
* @author http://www.BruceEckel.com
* @version 1.0 */
public class Property {
	/**
	* This is an example comment.
	@param args array of string arguments.
	@return no return value
	@exception no exceptions thrown
	*/
	public static main(String[] args) {
		System.out.println("Hello World");
	}
}

10. 编码样式
Java中名称标识一般为驼峰。
类名一般大写开头，变量与方法名一般小写开头



