1. 赋值运算符
我们知道，Java中除主类型之外，其他对象变量都由句柄操作，赋值运算符在操作“非主类型对象”时，传递的是句柄。
class A {
	char i;
}
A a = new A();
A b = a;
此时如果改变b.i的值，a.i的值也会改变。
注意的是：
String s = "a";
String k = s;
k = "b"; //此时的s还是"a"，因为此语句只是让k指向了另一个对象，并不会改变s的指向。如果改为k.value = "b"（语法错误，String成员value是私有的），s的值就会改了。
其实String本质上还是一个类，和上面的类A没有太大区别。

2. 一元加减符
即正负含义。所以在Java中可以看到如下语句：
s = i + +j;
s = i * -j;
都是合法的。

3. == 与 !=
任何对象都可以比较。
基本类型可以直接比较，而非基本类型比较的是句柄，并非句柄指向的对象，所以非基本类型比较一般使用equals

4. Java中的boolean
两个boolean值之间可以比较==和!=，其他比较运算符都不可以。
与C++不同的地方是：
int i = 2;
if(i) {} // C++中是允许的，但在Java中不允许。

5. Java中的按位运算符
操作整数的二进制位。
&(与) |(或) ~(非) ^(异或)
注意的是：boolean可以进行与或异或，但不可能进行非操作。

6. Java中的移位运算符
(1) 移位运算符
>> 是带符号右移，若左操作数是正数，则高位补“0”，若左操作数是负数，则高位补“1”.
<< 将左操作数向左边移动，并且在低位补0.
>>> 是无符号右移，无论左操作数是正数还是负数，在高位都补“0”
(2) 三种移位符号作用的左操作数有五种：long,int,short,byte,char,但是在作用不同的操作数类型时，其具体过程不同, 遵循一下几个原则：
(a) int移位时，左边的操作数是32位的，此时的移位符号作用在32位bit上。如：1 >> 3, 是将00000000 00000000 00000000 00000001这32位向右边移动3位。
(b) long 移位时，左边的操作数是64位的，此时移位符号作用在64位bit上。如：1L >> 3。
(c) short, byte,char 在移位之前首先将数据转换为int，然后再移位，此时移位符号作用在32为bit上。如：(byte)0xff >>> 7, 是将11111111 11111111 11111111 11111111向右边移动7位，得到00000001 11111111 11111111 11111111, 所以结果不是你所期望的1，呵呵。
(d) 由上面可得，当左操作数是long时，移位之后得到的类型是long，当左操作数是其它四中类型时，移位之后得到的类型是int，所以如果做操作数是byte,char,short 时，你用　>>=,>>>=, <<= 其实是将得到的int 做低位截取得到的数值。
(3) 三种移位符号除了对做操作数有操作规则外，其实对右操作数也有操作规则。
如果左操作数（转换之后的）是int,那么右操作数只有低５位有效，为什么?因为int 总共就32位，如：23 >> 33, 结果与23 >>1是一样的，都是11；同理，如果左边操作数是long，那么右边操作数只有低6位有效。

7. 三元运算符
条件表达式 ？ 值1 : 值2
注意的是，如果表达式为真，才会去计算值1，如果表达式为假，才会去计算法值2.

8. 逗号运算符
int x = (5 + 5, 10 + 10); // java中是报错的
Java中唯一用法就是用在for循环内。

9. 运算符重载
在Java中是不支持运算符重载的。

10. 类型转换
Java中的“放大转换”是可以自动进行的。“放大转换”：将一种容纳信息比较小的类型转换为容纳信息比较大的类型。
而“缩小转换”是需要明确说明的。用法： int i = (int) 12L;
Java中所有主类型，都可以明确类型转换为其他主类型。--boolean类型除外。
非主类型是不可以进行类型转换的。

在 char,byte和short中,我们可看到算术运算符的“类型转换”效果。对这些类型的任何一个进行算术运算, 都会获得一个int结果。必须将其明确“类型转换”回原来的类型(缩小转换会造成信息的丢失),以便将值赋回那个类型。
char i='a', j='b';
char s=i+j;//error
char s =(char) (i+j);//ok

11. 字面值
long i = 123L;
0x/0X 十六进制 0xff12
0 八进制 0123
L/l结尾的是long类型
F/f结尾的是float类型
D/d结尾的是double类型
1.23e23 表示1.23乘以10的23次方。

12. Java中的标签
和C++中的一致，用于嵌套循环中。
之和break和continue联合使用。
llab1:
while(true){
	while(true){
		if(s > 1)
			break llab1;
	}
}

13. switch
Java中switch语法：
switch(整数选择因子){
	case 整数值: 语句;break;
	case ...
	default:语句;
}
整数选择因子-char/byte/short/int/long
